# DO NOT UPDATE THIS FILE MANUALLY; ANY CHANGES WILL BE OVERRIDDEN BY THE J2 DIR TEMPLATES
updatereq:
  vertices:
    
    - label: Person.Natural
      condition: ${(Tax_Number_1?.replaceAll('[^0-9]', '')?.length() == 11 || Tax_Number_2?.replaceAll('[^0-9]', '')?.length() == 11)}
      props:
        - name: Person.Natural.Full_Name
          val: ${Name_1?.trim()?.toUpperCase()}${Name_2?.trim()?' ':''}${Name_2?.trim()?.toUpperCase()}
        - name: Person.Natural.Customer_ID
          val: ${Tax_Number_1?.replaceAll('[^0-9]', '')?.length() == 11?Tax_Number_1?.replaceAll('[^0-9]', ''):Tax_Number_2?.replaceAll('[^0-9]', '')}
        - name: Person.Natural.Type
          val: Fornecedores
          excludeFromSearch: True
    
    - label: Object.Identity_Card
      condition: ${Tax_Number_1?.replaceAll('[^0-9]', '')?.length() == 11 || Tax_Number_2?.replaceAll('[^0-9]', '')?.length() == 11}
      props:
        - name: Object.Identity_Card.Id_Value
          val: ${Tax_Number_1?.replaceAll('[^0-9]', '')?.length() == 11?Tax_Number_1?.replaceAll('[^0-9]',''):Tax_Number_2?.replaceAll('[^0-9]', '')}
          mandatoryInSearch: True
        - name: Object.Identity_Card.Id_Type
          val: CPF
          excludeFromSearch: True
    
    - label: Person.Organisation
      condition: ${Tax_Number_1?.replaceAll('[^0-9]', '')?.length() == 14 || Tax_Number_2?.replaceAll('[^0-9]', '')?.length() == 14}
      props:
        - name: Person.Organisation.Registration_Number
          val: ${Tax_Number_1?.replaceAll('[^0-9]', '') || Tax_Number_2?.replaceAll('[^0-9]', '')}
          mandatoryInSearch: True
        - name: Person.Organisation.Name
          val: ${Name_1?.trim()?.toUpperCase()} ${Name_2?.trim()?.toUpperCase()}
    
    - label: Person.Natural
      condition: ${!(Tax_Number_1?.replaceAll('[^0-9]', '')?.length() == 11 || Tax_Number_2?.replaceAll('[^0-9]', '')?.length() == 11 || Tax_Number_1?.replaceAll('[^0-9]', '')?.length() == 14 || Tax_Number_2?.replaceAll('[^0-9]', '')?.length() == 14)}
      props:
        - name: Person.Natural.Full_Name
          val: ${Name_1?.trim()?.toUpperCase()}${Name_2?.trim()?' ':''}${Name_2?.trim()?.toUpperCase()}
        - name: Person.Natural.Customer_ID
          val: ${Vendor}
        - name: Person.Natural.Type
          val: Fornecedores Sem Tax
          excludeFromSearch: True
    
    - label: Object.Phone_Number
      name: phone
      condition: ${Telephone_1?.trim()?.length() > 0}
      props:
        - name: Object.Phone_Number.Raw
          val: ${Telephone_1}
        - name: Object.Phone_Number.Type
          val: Fornecedor
          excludeFromSubsequenceSearch: True
        - name: Object.Phone_Number.Numbers_Only
          val: ${(Telephone_1?.replaceAll('[^0-9]', '')?:'00000000')}
          type: "[Ljava.lang.String;"
          excludeFromSearch: True
        - name: Object.Phone_Number.Last_7_Digits
          val: ${(((Telephone_1?.replaceAll('[^0-9]', ''))?:'0000000')[-7..-1])}
          mandatoryInSearch: True
          type: "[Ljava.lang.String;"
    
    - label: Object.Phone_Number
      name: phone2
      condition: ${Telephone_2?.trim()?.length() > 0}
      props:
        - name: Object.Phone_Number.Raw
          val: ${Telephone_2}
        - name: Object.Phone_Number.Type
          val: Fornecedor
          excludeFromSubsequenceSearch: True
        - name: Object.Phone_Number.Numbers_Only
          val: ${(Telephone_2?.replaceAll('[^0-9]', '')?:'00000000')}
          type: "[Ljava.lang.String;"
          excludeFromSearch: True
        - name: Object.Phone_Number.Last_7_Digits
          val: ${(((Telephone_2?.replaceAll('[^0-9]', ''))?:'0000000')[-7..-1])}
          mandatoryInSearch: True
          type: "[Ljava.lang.String;"
    
    - label: Location.Address
      props:
        - name: Location.Address.Full_Address
          val: ${ ((Street?:'')+ '\\n' + (City?:'') + '\\n' + (District?:'') + '\\n' + (Cty?:'')).replaceAll('\\n', ' ')}
          mandatoryInSearch: True
        - name: Location.Address.parser
          val: ${ ((Street?:'')+ '\\n' + (City?:'') + '\\n' + (District?:'') + '\\n' + (Cty?:'')).replaceAll('\\n', ' ')}
          mandatoryInSearch: True
          type: "com.pontusvision.utils.LocationAddress"
    
    - label: Event.Ingestion
      props:
        - name: Event.Ingestion.Type
          val: sap/fornecedores
          excludeFromSearch: True
        - name: Event.Ingestion.Operation
          val: Structured Data Insertion
          excludeFromSearch: True
        - name: Event.Ingestion.Domain_b64
          val: ${original_request?.bytes?.encodeBase64()?.toString()}
          excludeFromSearch: True
        - name: Event.Ingestion.Metadata_Create_Date
          val: ${new Date()}
          type: "java.util.Date"
          excludeFromSearch: True
        - name: Event.Ingestion.Metadata_Update_Date
          val: ${new Date()}
          type: "java.util.Date"
          excludeFromSearch: True
    
    - label: Event.Group_Ingestion
      props:
        - name: Event.Group_Ingestion.Metadata_Start_Date
          val: ${new Date()}
          mandatoryInSearch: True
          type: "java.util.Date"
        - name: Event.Group_Ingestion.Metadata_End_Date
          val: ${new Date()}
          type: "java.util.Date"
          excludeFromSearch: True
        - name: Event.Group_Ingestion.Type
          val: sap/fornecedores
          excludeFromSearch: True
        - name: Event.Group_Ingestion.Operation
          val: Structured Data Insertion
          excludeFromSearch: True
    
    - label: Object.Data_Source
      props:
        - name: Object.Data_Source.Name
          val: sap/fornecedores
        - name: Object.Data_Source.Type
          val: sap/fornecedores
        - name: Object.Data_Source.Description
          val: Registros de Fornecedores no Polaris/SAP

  edges:
  - label: Is_Located
    fromVertexLabel: Person.Organisation
    toVertexLabel: Location.Address
  - label: Is_Located
    fromVertexLabel: Person.Natural
    toVertexLabel: Location.Address
  - label: Has_Ingestion_Event
    fromVertexLabel: Person.Organisation
    toVertexLabel: Event.Ingestion
  - label: Has_Ingestion_Event
    fromVertexLabel: Person.Natural
    toVertexLabel: Event.Ingestion
  - label: Has_Ingestion_Event
    fromVertexLabel: Event.Group_Ingestion
    toVertexLabel: Event.Ingestion
  - label: Has_Ingestion_Event
    fromVertexLabel: Object.Data_Source
    toVertexLabel: Event.Group_Ingestion
  - label: Has_Phone_Number
    fromVertexLabel: Person.Organisation
    toVertexName: phone
  - label: Has_Phone_Number
    fromVertexLabel: Person.Organisation
    toVertexName: phone2
  - label: Has_Phone_Number
    fromVertexLabel: Person.Natural
    toVertexName: phone
  - label: Has_Phone_Number
    fromVertexLabel: Person.Natural
    toVertexName: phone2
  - label: Has_Identity_Card
    fromVertexLabel: Person.Natural
    toVertexLabel: Object.Identity_Card

