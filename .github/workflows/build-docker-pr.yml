# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Build Docker PR

on:
  pull_request:
    branches: [ master ]

jobs:
  build-docker-pr:

    runs-on: ubuntu-latest
#    container: pontusvisiongdpr/pontus-track-graphdb-odb-pt:latest

# STEP 1: RUN build-docker-conf.sh then build-docker-lib.sh everytime you CREATE a new PR

    steps:
      - uses: actions/checkout@v2

      - name: Prepare
        id: prep
        run: |
          TAG=$(echo $GITHUB_SHA | head -c7)
          IMAGE="pontusvisiongdpr/pontus-graphdb-odb-lib"
          echo ::set-output name=tagged_image::${IMAGE}:${TAG}
          echo ::set-output name=tag::${TAG}

      - name: Set up Docker Buildx
        id: buildx
        # Use the action from the master, as we've seen some inconsistencies with @v1
        # Issue: https://github.com/docker/build-push-action/issues/286
        uses: docker/setup-buildx-action@master
        # Only worked for us with this option on 🤷‍♂️
        with:
          install: true

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-multi-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-multi-buildx

      - name: Build & Test Docker after PullRequest
        run: |
          echo $GITHUB_REF
          cat ./docker-lib/Dockerfile.template | envsubst > ./docker-lib/Dockerfile
#          chmod +x ./build-docker-pr.sh
#          ./build-docker-pr.sh

      - name: Build production image
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./docker-lib/Dockerfile
          # Set the desired build target here
          target: deploy
          push: false
          tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=local,src=/tmp/.buildx-cache
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

          
# STEP 2: AFTER successful merge ++ version patch major.minor.patch semver (Semantic Versioning)

  update-semver-patch:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: rickstaa/action-update-semver@v1
        with:
          move_patch_tag: true  # (optional, default is "false")


# STEP 3: AFTER push it to DockerHub (gonna need Docker Credentials as GitHub secret)

#    - name: Docker Build & Push Action
#      uses: mr-smithers-excellent/docker-build-push@v5.6
#      with:
#        image: pontusvisiongdpr/pontus-track-graphdb-odb-pt:latest
#        tags: latest
#        registry: docker.io
#        dockerfile: Dockerfile.ci
#        username: ${{ secrets.DOCKER_USERNAME }}
#        password: ${{ secrets.DOCKER_PASSWORD }}
#  publish:
#    needs: build


# STEP 4: FINALLY GitHub TAG MASTER branch with same value as DockerHub's semver

# ?????

# ---------------------------------------------------------------------------

#    - name: echo PWD
#      run: pwd
      
#    - name: list dir
#      run: ls /home/runner/work/pontus-odb-graph/pontus-odb-graph | cat
#       echo "/home/runner/work/pontus-odb-graph/pontus-odb-graph" |
#        echo "/home/runner/work/pontus-odb-graph/pontus-odb-graph/.github" |
#        ls /home/runner/work/pontus-odb-graph/pontus-odb-graph/.github

#    - name: echo GITHUB_WORKSPACE
#      run: echo "${GITHUB_WORKSPACE}"

#    - name: echo github.workspace
#      run: echo "${github.workspace}"

#    - name: Make file runnable && Build docker-lib
#     echo "${github.workspace}" |
#     echo "${GITHUB_WORKSPACE}"
#      run: |
#        chmod +x "${GITHUB_WORKSPACE}/.github/build-docker-lib.sh" |
#        "${GITHUB_WORKSPACE}/.github/build-docker-lib.sh"
      
#    - name: Build Docker Conf
#      run: build-docker-conf.sh


# -------------------------------------------------------------------- original:

#    - uses: actions/checkout@v2

#    - name: Set up JDK 1.8
#      uses: actions/setup-java@v2
#      with:
#        java-version: '8'
#        distribution: 'adopt'
#        cache: maven
