
# STEP 1 --------------------------------------------------------------
            
#          - name: Prepare Docker image
#            id: prep
#            run: |
#              TAG=$(echo $GITHUB_SHA | head -c7)
#              IMAGE="pontusvisiongdpr/pontus-graphdb-odb-lib"
#              echo ::set-output name=tagged_image::${IMAGE}:${TAG}
#              echo ::set-output name=tag::${TAG}

#          - name: Set up Docker Buildx
#            id: buildx
#            uses: docker/setup-buildx-action@master
#            with:
#              install: true

#          - name: Cache Docker layers
#            uses: actions/cache@v2
#            with:
#              path: /tmp/.buildx-cache
              # Key is named differently to avoid collision
#              key: ${{ runner.os }}-multi-buildx-${{ github.sha }}
#              restore-keys: |
#                ${{ runner.os }}-multi-buildx

#          - name: envsubst Dockerfile
#            run: |
#              export DOLLAR='$'
#              cat ./docker-lib/Dockerfile.template | envsubst > ./docker-lib/Dockerfile
              
#          - name: Build Docker image
#            uses: docker/build-push-action@v2
#            with:
#              context: .
#              builder: ${{ steps.buildx.outputs.name }}
#              file: ./docker-lib/Dockerfile
              # target: deploy
#              push: false
#              tags: ${{ steps.prep.outputs.tagged_image }}
#              cache-from: type=local,src=/tmp/.buildx-cache
              # More: https://github.com/moby/buildkit#--export-cache-options
              # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
#              cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

#          - name: Move cache
#            run: |
#              rm -rf /tmp/.buildx-cache
#              mv /tmp/.buildx-cache-new /tmp/.buildx-cache


# STEP 2: AFTER successful merge ++ version patch major.minor.PATCH semver (Semantic Versioning)


name: Build Release Patch

on:
  push:

    branches: [ master ]
#    branches-ignore:
#      - '**'
    tags:
      - 'v*.*.*'

jobs:

  update-semver-patch:

    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v2
      
      - name: semver-tags
        id: semver-tags
        uses: SOLIDSoftworks/semver-tags@1.0.1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag-prefix: 'v'
          default-version: '1.13.2'
          dry-run: false
#          prerelease: 'alpha'

      - name: Get the output version
        run: |
          echo "The new version is ${{ steps.semver-tags.outputs.semantic-version }}"
          echo "The previous version was ${{ steps.semver-tags.outputs.previous-version }}"
          echo "The core version part is ${{ steps.semver-tags.outputs.core-version }}"

# STEP 3: AFTER push it to DockerHub (gonna need Docker Credentials as GitHub secret)

name: Push Image to DockerHub

on:
  push:
    branches: [ master ]

jobs:
  push-dockerhub:

        runs-on: ubuntu-latest
        
        steps:
        
          - uses: actions/checkout@v2

# STEP 3 --------------------------------------------------------------
            
          - name: Publish to DockerHub
            uses: docker/build-push-action@v1
            with:
              username: ${{ secrets.DOCKER_USERNAME }}
              password: ${{ secrets.DOCKER_PASSWORD }}
              repository: omarion111/github-actions
              tags: latest
              dockerfile: docker-lib/Dockerfile


#          - name: echo secrets
#            run: |
#              echo  ${{ secrets.DOCKER_USERNAME }}
#              echo ${{ secrets.DOCKER_PASSWORD }}

#          - name: Docker Push Action
#            id: docker-push
#            uses: mr-smithers-excellent/docker-build-push@v5.6
#            with:
#              image: 'pontusvisiongdpr/pontus-track-graphdb-odb-pt'
#              tags: latest
#              registry: 'omarion111'
#              dockerfile: 'docker-conf/Dockerfile'
#              username: ${{ secrets.DOCKER_USERNAME }}
#              password: ${{ secrets.DOCKER_PASSWORD }}
#      publish:
#        needs: build

#          - name: Get Outputs
#            run: |
#              echo "Full name of the Docker image with registry prefix: ${{ steps.docker-push.outputs.imageFullName }}"
#              echo "Name of the Docker image with owner prefix: ${{ steps.docker-push.outputs.imageName }}"
#              echo "Tags for the Docker image: ${{ steps.docker-push.outputs.tags }}"


